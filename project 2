{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNf+kVR+eUWJ6LYcgjeu3Fd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2403a51447-png/BATCH-17-DVA/blob/main/project%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_bgwvH9op_K",
        "outputId": "a742d678-650e-49a9-d53c-84c8bdb70243"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original DataFrame:\n",
            "   OrderID  CustomerID              Product   Price  Quantity   OrderDate  \\\n",
            "0        1         101               Laptop  1200.0         1  2023-01-15   \n",
            "1        2         102                Mouse    25.0         2  2023-01-16   \n",
            "2        3         103             Keyboard    75.0         1  2023-01-17   \n",
            "3        4         101               Laptop  1200.0         1  2023-01-15   \n",
            "4        5         104              Monitor   300.0         1  2023-01-18   \n",
            "5        6         105              Printer   200.0         1  2023-01-19   \n",
            "6        7         102                Mouse     NaN         3  2023-01-16   \n",
            "7        8         106               Webcam    50.0         1  2023-01-20   \n",
            "8        9         107              Speaker    80.0         1  2023-01-21   \n",
            "9       10         108  External Hard Drive   150.0         1  2023-01-22   \n",
            "\n",
            "   DiscountApplied  \n",
            "0             0.10  \n",
            "1             0.05  \n",
            "2             0.00  \n",
            "3             0.10  \n",
            "4             0.00  \n",
            "5             0.00  \n",
            "6             0.05  \n",
            "7             0.00  \n",
            "8             0.00  \n",
            "9             0.00  \n",
            "\n",
            "==============================\n",
            "\n",
            "Missing values before cleaning:\n",
            "OrderID            0\n",
            "CustomerID         0\n",
            "Product            0\n",
            "Price              1\n",
            "Quantity           0\n",
            "OrderDate          0\n",
            "DiscountApplied    0\n",
            "dtype: int64\n",
            "\n",
            "\n",
            "DataFrame after filling missing 'Price' with mean:\n",
            "   OrderID  CustomerID              Product        Price  Quantity  \\\n",
            "0        1         101               Laptop  1200.000000         1   \n",
            "1        2         102                Mouse    25.000000         2   \n",
            "2        3         103             Keyboard    75.000000         1   \n",
            "3        4         101               Laptop  1200.000000         1   \n",
            "4        5         104              Monitor   300.000000         1   \n",
            "5        6         105              Printer   200.000000         1   \n",
            "6        7         102                Mouse   364.444444         3   \n",
            "7        8         106               Webcam    50.000000         1   \n",
            "8        9         107              Speaker    80.000000         1   \n",
            "9       10         108  External Hard Drive   150.000000         1   \n",
            "\n",
            "    OrderDate  DiscountApplied  \n",
            "0  2023-01-15             0.10  \n",
            "1  2023-01-16             0.05  \n",
            "2  2023-01-17             0.00  \n",
            "3  2023-01-15             0.10  \n",
            "4  2023-01-18             0.00  \n",
            "5  2023-01-19             0.00  \n",
            "6  2023-01-16             0.05  \n",
            "7  2023-01-20             0.00  \n",
            "8  2023-01-21             0.00  \n",
            "9  2023-01-22             0.00  \n",
            "\n",
            "==============================\n",
            "\n",
            "Duplicate rows before removal:\n",
            "Empty DataFrame\n",
            "Columns: [OrderID, CustomerID, Product, Price, Quantity, OrderDate, DiscountApplied]\n",
            "Index: []\n",
            "\n",
            "\n",
            "DataFrame after removing duplicate rows:\n",
            "   OrderID  CustomerID              Product        Price  Quantity  \\\n",
            "0        1         101               Laptop  1200.000000         1   \n",
            "1        2         102                Mouse    25.000000         2   \n",
            "2        3         103             Keyboard    75.000000         1   \n",
            "3        4         101               Laptop  1200.000000         1   \n",
            "4        5         104              Monitor   300.000000         1   \n",
            "5        6         105              Printer   200.000000         1   \n",
            "6        7         102                Mouse   364.444444         3   \n",
            "7        8         106               Webcam    50.000000         1   \n",
            "8        9         107              Speaker    80.000000         1   \n",
            "9       10         108  External Hard Drive   150.000000         1   \n",
            "\n",
            "    OrderDate  DiscountApplied  \n",
            "0  2023-01-15             0.10  \n",
            "1  2023-01-16             0.05  \n",
            "2  2023-01-17             0.00  \n",
            "3  2023-01-15             0.10  \n",
            "4  2023-01-18             0.00  \n",
            "5  2023-01-19             0.00  \n",
            "6  2023-01-16             0.05  \n",
            "7  2023-01-20             0.00  \n",
            "8  2023-01-21             0.00  \n",
            "9  2023-01-22             0.00  \n",
            "\n",
            "==============================\n",
            "\n",
            "DataFrame after converting 'OrderDate' to datetime:\n",
            "OrderID                     int64\n",
            "CustomerID                  int64\n",
            "Product                    object\n",
            "Price                     float64\n",
            "Quantity                    int64\n",
            "OrderDate          datetime64[ns]\n",
            "DiscountApplied           float64\n",
            "dtype: object\n",
            "\n",
            "==============================\n",
            "\n",
            "DataFrame after adding 'TotalAmount' column:\n",
            "   OrderID  CustomerID              Product        Price  Quantity  OrderDate  \\\n",
            "0        1         101               Laptop  1200.000000         1 2023-01-15   \n",
            "1        2         102                Mouse    25.000000         2 2023-01-16   \n",
            "2        3         103             Keyboard    75.000000         1 2023-01-17   \n",
            "3        4         101               Laptop  1200.000000         1 2023-01-15   \n",
            "4        5         104              Monitor   300.000000         1 2023-01-18   \n",
            "5        6         105              Printer   200.000000         1 2023-01-19   \n",
            "6        7         102                Mouse   364.444444         3 2023-01-16   \n",
            "7        8         106               Webcam    50.000000         1 2023-01-20   \n",
            "8        9         107              Speaker    80.000000         1 2023-01-21   \n",
            "9       10         108  External Hard Drive   150.000000         1 2023-01-22   \n",
            "\n",
            "   DiscountApplied  TotalAmount  \n",
            "0             0.10  1080.000000  \n",
            "1             0.05    47.500000  \n",
            "2             0.00    75.000000  \n",
            "3             0.10  1080.000000  \n",
            "4             0.00   300.000000  \n",
            "5             0.00   200.000000  \n",
            "6             0.05  1038.666667  \n",
            "7             0.00    50.000000  \n",
            "8             0.00    80.000000  \n",
            "9             0.00   150.000000  \n",
            "\n",
            "==============================\n",
            "\n",
            "Total spending per customer:\n",
            "CustomerID\n",
            "101    2160.000000\n",
            "102    1086.166667\n",
            "103      75.000000\n",
            "104     300.000000\n",
            "105     200.000000\n",
            "106      50.000000\n",
            "107      80.000000\n",
            "108     150.000000\n",
            "Name: TotalAmount, dtype: float64\n",
            "\n",
            "==============================\n",
            "\n",
            "Orders for Laptops:\n",
            "   OrderID  CustomerID Product   Price  Quantity  OrderDate  DiscountApplied  \\\n",
            "0        1         101  Laptop  1200.0         1 2023-01-15              0.1   \n",
            "3        4         101  Laptop  1200.0         1 2023-01-15              0.1   \n",
            "\n",
            "   TotalAmount  \n",
            "0       1080.0  \n",
            "3       1080.0  \n",
            "\n",
            "==============================\n",
            "\n",
            "DataFrame after renaming columns:\n",
            "   OrderID  CustomerID          ItemOrdered    UnitPrice  Quantity  OrderDate  \\\n",
            "0        1         101               Laptop  1200.000000         1 2023-01-15   \n",
            "1        2         102                Mouse    25.000000         2 2023-01-16   \n",
            "2        3         103             Keyboard    75.000000         1 2023-01-17   \n",
            "3        4         101               Laptop  1200.000000         1 2023-01-15   \n",
            "4        5         104              Monitor   300.000000         1 2023-01-18   \n",
            "5        6         105              Printer   200.000000         1 2023-01-19   \n",
            "6        7         102                Mouse   364.444444         3 2023-01-16   \n",
            "7        8         106               Webcam    50.000000         1 2023-01-20   \n",
            "8        9         107              Speaker    80.000000         1 2023-01-21   \n",
            "9       10         108  External Hard Drive   150.000000         1 2023-01-22   \n",
            "\n",
            "   DiscountApplied  TotalAmount  \n",
            "0             0.10  1080.000000  \n",
            "1             0.05    47.500000  \n",
            "2             0.00    75.000000  \n",
            "3             0.10  1080.000000  \n",
            "4             0.00   300.000000  \n",
            "5             0.00   200.000000  \n",
            "6             0.05  1038.666667  \n",
            "7             0.00    50.000000  \n",
            "8             0.00    80.000000  \n",
            "9             0.00   150.000000  \n",
            "\n",
            "==============================\n",
            "\n",
            "DataFrame with 'Category' column using map():\n",
            "   OrderID  CustomerID          ItemOrdered    UnitPrice  Quantity  OrderDate  \\\n",
            "0        1         101               Laptop  1200.000000         1 2023-01-15   \n",
            "1        2         102                Mouse    25.000000         2 2023-01-16   \n",
            "2        3         103             Keyboard    75.000000         1 2023-01-17   \n",
            "3        4         101               Laptop  1200.000000         1 2023-01-15   \n",
            "4        5         104              Monitor   300.000000         1 2023-01-18   \n",
            "5        6         105              Printer   200.000000         1 2023-01-19   \n",
            "6        7         102                Mouse   364.444444         3 2023-01-16   \n",
            "7        8         106               Webcam    50.000000         1 2023-01-20   \n",
            "8        9         107              Speaker    80.000000         1 2023-01-21   \n",
            "9       10         108  External Hard Drive   150.000000         1 2023-01-22   \n",
            "\n",
            "   DiscountApplied  TotalAmount          Category  \n",
            "0             0.10  1080.000000       Electronics  \n",
            "1             0.05    47.500000       Peripherals  \n",
            "2             0.00    75.000000       Peripherals  \n",
            "3             0.10  1080.000000       Electronics  \n",
            "4             0.00   300.000000       Peripherals  \n",
            "5             0.00   200.000000  Office Equipment  \n",
            "6             0.05  1038.666667       Peripherals  \n",
            "7             0.00    50.000000       Peripherals  \n",
            "8             0.00    80.000000       Peripherals  \n",
            "9             0.00   150.000000           Storage  \n",
            "\n",
            "==============================\n",
            "\n",
            "Cleaned data saved to 'cleaned_orders.csv'\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-436395174.py:27: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['Price'].fillna(df['Price'].mean(), inplace=True) #\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Create a sample DataFrame (replace with your actual data loading)\n",
        "data = {\n",
        "    'OrderID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
        "    'CustomerID': [101, 102, 103, 101, 104, 105, 102, 106, 107, 108],\n",
        "    'Product': ['Laptop', 'Mouse', 'Keyboard', 'Laptop', 'Monitor', 'Printer', 'Mouse', 'Webcam', 'Speaker', 'External Hard Drive'],\n",
        "    'Price': [1200.00, 25.00, 75.00, 1200.00, 300.00, 200.00, np.nan, 50.00, 80.00, 150.00],\n",
        "    'Quantity': [1, 2, 1, 1, 1, 1, 3, 1, 1, 1],\n",
        "    'OrderDate': ['2023-01-15', '2023-01-16', '2023-01-17', '2023-01-15', '2023-01-18', '2023-01-19', '2023-01-16', '2023-01-20', '2023-01-21', '2023-01-22'],\n",
        "    'DiscountApplied': [0.1, 0.05, 0.0, 0.1, 0.0, 0.0, 0.05, 0.0, 0.0, 0.0]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "print(\"Original DataFrame:\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 1. Handle Missing Values\n",
        "# Identify missing values\n",
        "print(\"Missing values before cleaning:\")\n",
        "print(df.isnull().sum()) # {Link: Analytics Vidhya https://www.analyticsvidhya.com/blog/2021/06/data-cleaning-using-pandas/}\n",
        "print(\"\\n\")\n",
        "\n",
        "# Fill missing 'Price' with the mean of the column\n",
        "df['Price'].fillna(df['Price'].mean(), inplace=True) #\n",
        "print(\"DataFrame after filling missing 'Price' with mean:\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 2. Handle Duplicate Values\n",
        "# Check for duplicate rows\n",
        "print(\"Duplicate rows before removal:\")\n",
        "print(df[df.duplicated()]) #\n",
        "print(\"\\n\")\n",
        "\n",
        "# Remove duplicate rows (keeping the first occurrence)\n",
        "df.drop_duplicates(inplace=True) # {Link: Analytics Vidhya https://www.analyticsvidhya.com/blog/2021/06/data-cleaning-using-pandas/}\n",
        "print(\"DataFrame after removing duplicate rows:\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 3. Correct Data Types\n",
        "# Convert 'OrderDate' to datetime objects\n",
        "df['OrderDate'] = pd.to_datetime(df['OrderDate']) #\n",
        "print(\"DataFrame after converting 'OrderDate' to datetime:\")\n",
        "print(df.dtypes)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 4. Create New Columns (Feature Engineering)\n",
        "# Calculate 'TotalAmount'\n",
        "df['TotalAmount'] = (df['Price'] * df['Quantity']) * (1 - df['DiscountApplied'])\n",
        "print(\"DataFrame after adding 'TotalAmount' column:\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 5. Grouping and Aggregation\n",
        "# Group by 'CustomerID' and calculate total spending\n",
        "customer_spending = df.groupby('CustomerID')['TotalAmount'].sum() # {Link: pythongeeks.org https://pythongeeks.org/data-wrangling-in-python-with-examples/}\n",
        "print(\"Total spending per customer:\")\n",
        "print(customer_spending)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 6. Filtering Data\n",
        "# Select orders with 'Product' as 'Laptop'\n",
        "laptop_orders = df[df['Product'] == 'Laptop'] #\n",
        "print(\"Orders for Laptops:\")\n",
        "print(laptop_orders)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 7. Renaming Columns\n",
        "df.rename(columns={'Product': 'ItemOrdered', 'Price': 'UnitPrice'}, inplace=True) #\n",
        "print(\"DataFrame after renaming columns:\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 8. Data Transformation with `map()`\n",
        "# Create a dictionary for product categories\n",
        "product_categories = {\n",
        "    'Laptop': 'Electronics',\n",
        "    'Mouse': 'Peripherals',\n",
        "    'Keyboard': 'Peripherals',\n",
        "    'Monitor': 'Peripherals',\n",
        "    'Printer': 'Office Equipment',\n",
        "    'Webcam': 'Peripherals',\n",
        "    'Speaker': 'Peripherals',\n",
        "    'External Hard Drive': 'Storage'\n",
        "}\n",
        "df['Category'] = df['ItemOrdered'].map(product_categories) #\n",
        "print(\"DataFrame with 'Category' column using map():\")\n",
        "print(df)\n",
        "print(\"\\n\" + \"=\"*30 + \"\\n\")\n",
        "\n",
        "# 9. Saving the Cleaned Data\n",
        "# Save the cleaned DataFrame to a new CSV file\n",
        "df.to_csv('cleaned_orders.csv', index=False) #\n",
        "print(\"Cleaned data saved to 'cleaned_orders.csv'\")\n"
      ]
    }
  ]
}